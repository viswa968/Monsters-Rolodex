{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAK,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAAAR,GACpB,OACA,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAYC,EAAf,EAAeA,aAAf,OACtB,uBAEAZ,UAAU,SACTa,KAAK,SACLF,YAAaA,EAEbG,SAAUF,MCoCAG,E,kDAtCb,aAAe,IAAD,8BACZ,gBACKC,MAAO,CACVR,SAAS,GACTS,YAAa,IAJH,E,gEAQM,IAAD,OAEjBC,MAAM,8CAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAASc,S,+BAEhC,IAAD,SAC2BE,KAAKR,MAA/BR,EADD,EACCA,SAAUS,EADX,EACWA,YAEZQ,EAAkBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGpD,OACE,sBAAK3B,UAAU,MAAf,UACA,kDAEE,cAAC,EAAD,CACCW,YAAY,kBAEZC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAcY,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUvB,SAAUiB,W,GAjCRO,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0da3f11f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img alt =\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/> \r\n        <h1> {props.monster.name} </h1>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => {\r\n    return (\r\n    <div className='card-list'>\r\n    { props.monsters.map(monster => (\r\n       <Card key={monster.id} monster={monster} /> \r\n    ))}\r\n    </div>\r\n)\r\n    };\r\n    ","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport  const SearchBox = ({ placeholder,handleChange }) => (\r\n    <input\r\n    // linking the search box with styling name search\r\n    className='search'\r\n     type='search' \r\n     placeholder={placeholder}\r\n    //  Synthetic events are events which occur when our DOM changes like onChange.\r\n     onChange={handleChange}\r\n\r\n     />\r\n)","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\n\nclass App extends Component{\n  constructor() {\n    super();\n    this.state= {\n      monsters:[],\n      searchField: ''\n      \n    };\n  }\n  componentDidMount(){\n    // here , we are fetching a request for data \n    fetch('https://jsonplaceholder.typicode.com/users')\n    // here, we receive it in json format\n    .then(response => response.json())\n    //  we store the above fetched data into users variable\n    .then(users => this.setState({ monsters:users }) )\n  }\n  render() {\n    const { monsters, searchField } = this.state;\n    // includes checks whether the given string matches or not.\n    const filteredMonsters= monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    \n\n  return (\n    <div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n      {/*  provides a search box */}\n      <SearchBox \n       placeholder='search monsters'\n      //  Synthetic events are events which occur when our DOM changes like onChange.\n       handleChange={e => this.setState({ searchField : e.target.value })}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n    \n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}